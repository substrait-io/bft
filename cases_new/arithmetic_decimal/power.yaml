### SUBSTRAIT_SCALAR_TEST: 1.0
### SUBSTRAIT_INCLUDE: https://github.com/substrait-io/substrait/blob/main/extensions/substrait/extensions/functions_arithmetic_decimal.yaml

# basic: Basic examples without any special cases
power(8::decimal, 2::decimal<38, 0>) = 64::fp64
power(1.0::decimal, -1.0::decimal<38, 0>) = 1.0::fp64
power(2.0::decimal<38, 0>, -2.0::decimal<38, 0>) = 0.25::fp64
power(13::decimal<38, 0>, 10::decimal<38, 0>) = 137858491849::fp64

# result_more_than_input_precison: Examples demonstrating result with more precision than input
power(16::decimal<2, 0>, 4::decimal<38, 0>) = 65536::fp64

# floating_exception: Examples demonstrating exceptional floating point cases
power(1.5e+10::decimal<38, 0>, 1.5e+20::decimal<38, 0>) = inf::fp64
power(-16::decimal<4, 0>, 1001::decimal<4, 0>) = -inf::fp64

# complex_number: Examples demonstrating complex number output
power(-1::decimal, 0.5::decimal<38,1>) [complex_number_result:NAN] = nan

# complex_number: Examples demonstrating complex number output tests: complex_number_result with ERROR
power(-1::decimal, 0.5::decimal<38,1>) [complex_number_result:ERROR] = error
